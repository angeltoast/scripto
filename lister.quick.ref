The 'lister' library is a set of user interface functions:
                 .------------------------------------------.
----------------( Shared class . General-purpose functions   )----------------
                 '------------------------------------------'
DoNotFound      Displays a warning message to inform user of a problem.
                May be called from any error-trapping code.
                Optional parameter: 
                $1 A short text message.
                Returns: No values are set
------------------------------------------------------------------------------
DoHeading       Clears the active window and prints a heading.
                Uses the global variable 'Backtitle' for the heading.
                Returns: No values are set.
------------------------------------------------------------------------------
DoForm          Prints a centred prompt for user to enter data.
                Expects one parameter: 
                $1 A short text message to instruct the user.
                Sets $GlobalChar with the text entered by the user.
------------------------------------------------------------------------------
DoMessage       Prints an informative message with an Ok button.
                Optional parameter: 
                $1 A short text message
                Returns: No values are set
------------------------------------------------------------------------------
DoButtons       Prints a row of buttons
                Parameters: 
                $1 Button text (eg: "Ok" for one button, or "Yes No" for two; 
                $2 Which button to highlight (numeric: 1=left or 2=right);
                $3 The row of the window on which the buttons are to be printed:
                     (this should normally be within the range 0 to 24);
                Sets the return code $? to the number of the button selected.
------------------------------------------------------------------------------
DoEnum          Enumerates words in a string
                Parameters:
                $1 A string of words; $2 Either a word or a number to be looked up
                in $1 (if not passed, will return the total number of words in $1).
                Sets the return code $? to the number of the word, and ...
                global variable $GlobalChar to the word at that number.
------------------------------------------------------------------------------
DoYesNo         A really simple yes/no prompt
                Parameter:
                $1 A short line of text to which the answer can be yes or no.
                Sets the return code $? to 1 (yes) or 2 (no) and ...
                global variable $GlobalChar to 'Yes' or 'No'.
                 .------------------------------------------.
----------------( Menu class .. Displaying and using menus   )----------------
                 '------------------------------------------'
DoMenu          Generates a simple menu of one-word items, centred on the page.
                Parameters:
                $1 String of single-word menu items, or the name of a file 
                containing those items ...
                   (max 15 advised, as we don't want to go off the screen, do we?);
                $2 Button text, eg: 'Ok Exit';
                $3 May be a prompt message or empty.
                Sets the return code $? to the number in the menu of the item
                selected.
------------------------------------------------------------------------------
DoLongMenu      Generates a menu of multi-word items.
                Parameters:
                $1 The name of a file containing the verbose menu items;
                $2 Optional button text, eg: 'Ok Exit'
                      (if empty will default to 'Ok Exit');
                $3 Optional message
                      (if $3 is required, $2 must be passed, even if null);
                Notes:
                DoLongMenu requires the named file to exist, or it will abort.
                The named file containing the verbose menu items ...
                      1) Should have one item to a line; 
                      2) Each line no longer than 50 characters, and
                      3) No more than 20 items ...
                          (we don't want to go off the screen, do we?)
                Sets the return code $? to the number in the menu of the item
                selected.
------------------------------------------------------------------------------
DoFirstItem     Prints a single item, centred, at the top of the page.
                Parameter: 
                $1 Text to print;
                Sets $GlobalCursorRow for any successive print instructions.
------------------------------------------------------------------------------
DoNextItem      Prints the next item of a menu
                Parameters:
                $1 startpoint; $2 Item text.
                Sets $GlobalCursorRow for any successive print instructions.
------------------------------------------------------------------------------
DoPrintRev      Prints a menu item in reverse text colour ...
                      (matched to the length of the longest item in the menu).
                Parameters:
                $1 Startpoint (horizontal position of the first character);
                $2 Length of the longest menu item (in characters);
                $3 Item text
                Sets $GlobalCursorRow for any successive print instructions.
------------------------------------------------------------------------------
DoKeypress      Used by DoMenu and DoLongMenu, but also available for other uses.
                Responds to user keypress (cursor keys and Enter)...
                No parameters.
                Sets $GlobalInt with a number representing the key pressed:
                      (0=Enter; 1=Up; 2=Left; 3=Down; 4=Right)
             .---------------------------------------------------------.
------------(  List class .. Display long lists and accept user input   )----------
             '---------------------------------------------------------'
DoLister        Prepares arrays for use by DoSelectPage and DoPrintPage
                to generate a (potentially multi-page) numbered list from a
                file.
                Parameter: $1 The name of the file containing the list
                Requirement:
                The calling function must first create the file containing the
                items to be listed, before calling DoLister.
                The file name must be passed to DoLister as $1;
                The file must have one word per item, one item per line.
                Returns: No values are set by DoLister itself (return values
                are set by DoPrintPage)
ListerSelectPage  Used by DoLister to manage page handling.
                The arrays used here are declared and initialised in
                DoLister as global in scope.
                Parameters (all set by DoLister):
                $1 = winHeight; $2 = winCentre; $3 lastPage;
                Returns: No values are set by DoSelectPage (return values are
                set by DoPrintPage)
ListerPrintPage Used by DoLister. Displays the selected page, then waits for the user
                to enter a number. The items are printed in columns.
                Parameters (all set by DoSelectPage):
                $1 winHeight; $2 winCentre; $3 instructions;
                $4 pageNumber; $5 lastItem
                The arrays used here are declared and initialised in
                DoLister as global in scope
                Sets $GlobalInt to the user input (item number)
                and $GlobalChar to the detail of the menu item.
------------------------------------------------------------------------------
DoMega          Generates a (potentially multi-page) numbered list from a file
                of crude data prepared by the calling program.
                Parameters:
                $1 Name of the file containing all the items;
                $2 Search term; $3 ignore (y/n)
MegaPage        Does the actual printing bit for DoMega.
                Parameters: $1 pageNumber; $2 pages; $3 display; $4 items; $5 counter
------------------------------------------------------------------------------
DoRadio         Prints up to four columns of radio buttons. The user moves the cursor
                using the cursor keys, and marks one button in each column by pressing 'x'
                Parameters:
                $1 Headline text; $2 (and optional $3, $4 & $5) prompt text for the radio
                buttons (strings of space-separated one-word prompts).
                The first item in each of $2, $3, $4 & $5 are column headings (required)
                Sets GlobalChar with the position of the selected item in each column
                (eg: 4 1 5 2) You can then relate each number to the original string
                variable using the DoEnum function.
RadioColumn     Handles printing of one column, its header and the items in it.
                Parameters (all generated and passed by DoRadio):
                $1 items; $2 total columns; $3 this column (1 to 3)
                $4 startpoint $5 longest
RadioSelect     Highlights the top radio button of the first column, then the next one as
                the cursor is moved vertically. Switches columns according to horizontal
                cursor movement. Marks an item as selected or deselected if the user
                presses 'x'. Also unmarks a previously selected item in the column if the
                user selects a different one.
                Parameters (all generated and passed by DoRadio):
                $1 number of columns (to monitor column switching) generated by DoRadio;
                $2 firstpoint (initially column1)
                $3 a string containing the lengths of the longest items in each column
                $4 a string containing the number of items in each column
------------------------------------------------------------------------------
(revision 210512 Elizabeth Mills May 2021)